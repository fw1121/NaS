#!/usr/bin/perl -w

################################################################################
# *
# * Copyright Jean-Marc Aury / Institut de Genomique / DSV / CEA
# *                            <jmaury@genoscope.cns.fr>
# *           Amin Madoui    / Institut de Genomique / DSV / CEA
# *                            <amadoui@genoscope.cns.fr>
# *           Stefan Engelen / Institut de Genomique / DSV / CEA
# *                            <sengelen@genoscope.cns.fr>
# *
# * This software, called NaS is a computer program whose purpose is to
# * build high-quality synthetic reads by using Illumina and Oxford Nanopore
# * sequencing technologies
# *
# * This software is governed by the CeCILL license under French law and
# * abiding by the rules of distribution of free software.  You can  use,
# * modify and/ or redistribute the software under the terms of the CeCILL
# * license as circulated by CEA, CNRS and INRIA at the following URL
# * "http://www.cecill.info".
# *
# * As a counterpart to the access to the source code and  rights to copy,
# * modify and redistribute granted by the license, users are provided only
# * with a limited warranty  and the software's author,  the holder of the
# * economic rights,  and the successive licensors  have only  limited
# * liability.
# *
# * In this respect, the user's attention is drawn to the risks associated
# * with loading,  using,  modifying and/or developing or reproducing the
# * software by the user in light of its specific status of free software,
# * that may mean  that it is complicated to manipulate,  and  that  also
# * therefore means  that it is reserved for developers  and  experienced
# * professionals having in-depth computer knowledge. Users are therefore
# * encouraged to load and test the software's suitability as regards their
# * requirements in conditions enabling the security of their systems and/or
# * data to be ensured and,  more generally, to use and operate it in the
# * same conditions as regards security.
# *
# * The fact that you are presently reading this means that you have had
# * knowledge of the CeCILL license and that you accept its terms.
################################################################################

use strict;
use Getopt::Long;

use Graph;
use Graph::Directed;
use Set::IntSpan;
use Data::Dumper;

our $PRG_NAME = $0;
our $COMPAREADS = 'compareads2';
our $EXTRACTREADS = 'extract_reads';
our $READSIZE = 300;
our $MINCOV = 30;
our $MAXCOV = 200;

my ($SILENT, $HELP) = (0, 0);
my ($READS, $PSL, $PREFIX, $OUT, $NAME, $ILMN_R1, $ILMN_R2) = ("", "", ".", "out.fastq", "", "", "");

my $result = &GetOptions("reads=s"  => \$READS,
			 "r1=s"     => \$ILMN_R1,
			 "r2=s"     => \$ILMN_R2,
			 "psl=s"    => \$PSL,
			 "prefix=s" => \$PREFIX,
			 "name=s"   => \$NAME,
			 "out=s"    => \$OUT,
			 "silent"   => \$SILENT,
                         "h"        => \$HELP,
                        );

if (!$result) { error(); }
if($HELP) { usage(); }

system("mkdir -p $PREFIX/tmp/badreads $PREFIX/tmp/seedreads/ $PREFIX/compareads/$NAME.R1 $PREFIX/compareads/$NAME.R2");
my ($fh_reads, $fh_psl, $fh_badreads, $fh_seedreads);
my $seedreads = "$PREFIX/tmp/seedreads/$NAME.fq";
open($fh_reads, "<", $READS) or die "cannot open < $READS: $!";
open($fh_psl, "cat $PSL | awk '{ print \$1-\$6-\$8, \$0; }' | sort -k1,1nr | ") or die "cannot open < $PSL: $!";
open($fh_badreads, ">", "$PREFIX/tmp/badreads/$NAME") or die "cannot open > $PREFIX/tmp/badreads/$NAME : $!";
open($fh_seedreads, ">", $seedreads) or die "cannot open > $seedreads : $!";


my $NB_SETS = 30;
my @sets = ();
for(my $i=0; $i<$NB_SETS; $i++) { push(@sets, new Set::IntSpan("-")); }

my (%seen, %goodreads, %badreads) = ((), (), ());
my ($sizeNano, $nb_bad_reads_detected) = (0, 0);

while(<$fh_psl>) {
    my @fields = split;
    $sizeNano = $fields[15];
    my $s = $fields[16]."-".$fields[17];
    my $set_s = new Set::IntSpan($s);
    my $valid = 0;
    my $name = $fields[10];
    $seen{$name}++;
    if(defined $seen{$name} && $seen{$name} > 1) { next; }
    $name =~ s/\/1//;
    $name =~ s/\/2//;
    if($fields[6]+$fields[8] < 300) {
	for(my $i=0; $i<$NB_SETS; $i++) {
	    my $curr_set = $sets[$i];
	    my $i_set = intersect $curr_set $s;
	    if(Set::IntSpan::size($i_set)<0.9*Set::IntSpan::size($set_s)) {
		#my $e_s = ($fields[16]-10)."-".($fields[17]+10);
		$curr_set->U($s);
		$goodreads{"@".$name} = 1;
		$valid = 1;
		last;
	    }
	}
    }
    if(!$valid) { 
	$badreads{"@".$name} = 1;
	$nb_bad_reads_detected++;
	print $fh_badreads $name, "\n"; 
    }
}

while(<$fh_reads>) {
    my @fields = split;
    my $name = $fields[0];
    if(defined $goodreads{$name} && $goodreads{$name} == 1) {
	print $fh_seedreads $name."/1\n";
	print $fh_seedreads $fields[1]."\n";
	print $fh_seedreads "+\n";
	print $fh_seedreads $fields[3]."\n";
	print $fh_seedreads $name."/2\n";
	print $fh_seedreads $fields[2]."\n";
	print $fh_seedreads "+\n";
	print $fh_seedreads $fields[4]."\n";
    }
}

my ($stop, $cycle) = (0, 1);
my $max_nb_reads = ($sizeNano * $MAXCOV) / (2*$READSIZE);
my $min_nb_reads = ($sizeNano * $MINCOV) / (2*$READSIZE);
my $nb_recruitreads = 0;
my %recruitreads = ();
while(!$stop) {
    %recruitreads = ();
    system("mkdir -p $PREFIX/compareads_$cycle $PREFIX/tmp/seedreads_$cycle");
    $nb_recruitreads = extractReads($seedreads, $PREFIX."/compareads_".$cycle, 3, 
				    $ILMN_R1, $ILMN_R2, $NAME, \%recruitreads);    
    if($nb_recruitreads > $min_nb_reads) { $stop = 1; }
    if($cycle >= 5) { $stop = 1; }
    if(!$stop) {
	my $file_seedreads = "$PREFIX/tmp/seedreads_$cycle/$NAME.fq";
	getReads($NAME, \%recruitreads, $file_seedreads, {}, $fh_reads, $max_nb_reads);
	$seedreads = $file_seedreads;
    }
    $cycle++;
}
$cycle--;
warn "[$NAME] $cycle cycle(s) of read recruitment performed, $nb_recruitreads reads found\n";
if($nb_bad_reads_detected + $nb_recruitreads <= $max_nb_reads) { %badreads = (); }

getReads($NAME, \%recruitreads, $OUT, \%badreads, $fh_reads, $max_nb_reads);




sub extractReads {
    my($seedfile, $p, $t, $ilR1, $ilR2, $n, $recruitreads) = @_;
    my $cmd_cprR1 = "$COMPAREADS -a $seedfile -b $ilR1 -o $p/$n.R1 -l $p/compareads_log/ -t $t 2>>$p/compareadsR1.stderr";
    my $cmd_cprR2 = "$COMPAREADS -a $seedfile -b $ilR2 -o $p/$n.R2 -l $p/compareads_log/ -t $t 2>>$p/compareadsR2.stderr";
    system($cmd_cprR1) == 0 or die "system $cmd_cprR1 failed: $?";
    system($cmd_cprR2) == 0 or die "system $cmd_cprR2 failed: $?";

    my $cmd_extrR1 = "$EXTRACTREADS $ilR1 $p/$n.R1/*_in_$n.fq.bv | paste - - - - | awk '{ print \$1; }' | sed \"s=/1==\" | sed \"s/@//\" > $p/$n.R1/more_reads.names";
    my $cmd_extrR2 = "$EXTRACTREADS $ilR2 $p/$n.R2/*_in_$n.fq.bv | paste - - - - | awk '{ print \$1; }' | sed \"s=/2==\" | sed \"s/@//\" > $p/$n.R2/more_reads.names";
    system($cmd_extrR1) == 0 or die "system $cmd_extrR1 failed: $?";
    system($cmd_extrR2) == 0 or die "system $cmd_extrR2 failed: $?";

    my $fh_recruitreads;
    open($fh_recruitreads, "cat $p/$n.R1/more_reads.names $p/$n.R2/more_reads.names | sort -u | ") or die "cannot open < $PSL: $!";

    my $nb_recruitreads = 0;
    while(<$fh_recruitreads>) {
	chomp;
	$recruitreads->{"@".$_}=1;
	$nb_recruitreads++;
    }
    return $nb_recruitreads;
}

sub getReads {
    my ($n, $reads, $file, $bad_reads, $fh_reads, $max_nb_reads) = @_;
    my ($nb_reads, $nb_bad_reads) = (0, 0);
    my $fh_out;
    open($fh_out, ">", $file) or die "cannot open > $file : $!";
    seek($fh_reads, 0, 0);
    while(<$fh_reads>) {
	if($nb_reads > $max_nb_reads) { 
	    warn "[$n] reached max. number of reads : $nb_reads !\n"; 
	    last; 
	}
	my @fields = split;
	my $name = $fields[0];
	if(defined $reads->{$name} && $reads->{$name}== 1) {
	    if(defined $bad_reads->{$name} && $bad_reads->{$name}==1) { 
		$nb_bad_reads++;
		next;
	    } else {
		$nb_reads++;
		print $fh_out $name."/1\n";
		print $fh_out $fields[1]."\n";
		print $fh_out "+\n";
		print $fh_out $fields[3]."\n";
		print $fh_out $name."/2\n";
		print $fh_out $fields[2]."\n";
		print $fh_out "+\n";
		print $fh_out $fields[4]."\n";
	    }
	}
    }
    warn "[$n] $nb_reads reads selected, and $nb_bad_reads bad reads found\n";
}


sub error {
    my $msg = shift;
    if(defined $msg) { warn "$msg\n"; }
    warn "See $PRG_NAME -h for more details.\n";
    exit 1;
}

sub usage {
    my $usage = "------------------------------------------------------------------------------------
$PRG_NAME - Retrieve reads similar to seeds reads previously found for one MiniIon read
-reads : a file which contain all illumina reads (R1 + R2) organize with on each line all this elements separate with just a space in this order :
[sequence name line without /1 or /2 at the end] [sequence for read /1] [sequence for read /2] [fastQ quality for read /1] [fastQ quality for read /2]
-r1 : illumina reads (R1) in fastQ format
-r2 : illumina reads (R2) in fastQ format
-psl : psl file of illumina seeds reads aligned on one MiniIon read
-prefix : directory for tempory data (current directory by default)
-name : name of the output file
-out : output directory (out.fastq by default)
-silent : silent mode (no argument)
-h : usage
------------------------------------------------------------------------------------\n";

   warn $usage;
    exit 1;
}
